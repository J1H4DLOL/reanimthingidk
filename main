game.StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.Chat, true)
game.Players.LocalPlayer.PlayerGui.CharacterSelection.Character.Value = "Chara"
wait(1)
game.Players.LocalPlayer.Character.Head:WaitForChild("HealthBar"):Destroy()
wait()

game.Players.LocalPlayer.Backpack:WaitForChild("Main").CharaMoves:Destroy()
game.Players.LocalPlayer.Character:WaitForChild("RealKnife"):Destroy()
game.Players.LocalPlayer.Character:WaitForChild("HateArm"):Destroy()
game.Players.LocalPlayer.Character:WaitForChild("HeartLocket"):Destroy()
local pass = getrenv()._G.Pass
local player = game.Players.LocalPlayer
local character = player.Character
local uis = game:GetService("UserInputService")

wait(3)
local netboost = Vector3.new(-30, 0, 0) --jitter (set to false to disable)
local newanimate = true --disable the animate script and enable after reanimation
local addtools = false --puts all tools from backpack to character and lets you hold them after reanimation
local method =  0--reanimation method
--methods:
--0 - breakJoints (takes 5.5s to load)
--1 - limbs
--2 - limbs + anti respawn
--3 - limbs + breakJoints after 5.5s
--4 - remove humanoid + breakJoints
--5 - remove humanoid + limbs
local alignmode = 1 --AlingPosition mode
--modes:
--1 - AlignPosition rigidity enabled true
--2 - 2 AlignPositions rigidity enabled both true and false
--3 - AlignPosition rigidity enabled false

local lp = game:GetService("Players").LocalPlayer
local rs = game:GetService("RunService")
local sg = game:GetService("StarterGui")
local ws = game:GetService("Workspace")

local c = lp.Character

local function gp(parent, name, className)
	local ret = nil
	if parent then
		for i, v in pairs(parent:GetChildren()) do
			if (v.Name == name) and v:IsA(className) then
				ret = v
			end
		end
	end
	return ret
end

local function align(Part0, Part1)
	Part0.CustomPhysicalProperties = PhysicalProperties.new(0.0001, 0.0001, 0.0001, 0.0001, 0.0001)

	local att1 = Instance.new("Attachment")
	att1.Orientation = Vector3.new(0, 0, 0)
	att1.Position = Vector3.new(0, 0, 0)
	att1.Archivable = true
	local att0 = att1:Clone()

	if (alignmode == 1) or (alignmode == 2) then
		local ape = Instance.new("AlignPosition", att0)
		ape.ApplyAtCenterOfMass = false
		ape.MaxForce = math.huge
		ape.MaxVelocity = math.huge
		ape.ReactionForceEnabled = false
		ape.Responsiveness = 200
		ape.Attachment1 = att1
		ape.Attachment0 = att0
		ape.Name = "AlignPositionRtrue"
		ape.RigidityEnabled = true
	end

	if (alignmode == 2) or (alignmode == 3) then
		local apd = Instance.new("AlignPosition", att0)
		apd.ApplyAtCenterOfMass = false
		apd.MaxForce = math.huge
		apd.MaxVelocity = math.huge
		apd.ReactionForceEnabled = false
		apd.Responsiveness = 200
		apd.Attachment1 = att1
		apd.Attachment0 = att0
		apd.Name = "AlignPositionRfalse"
		apd.RigidityEnabled = false
	end

	local ao = Instance.new("AlignOrientation", att0)
	ao.MaxAngularVelocity = math.huge
	ao.MaxTorque = math.huge
	ao.PrimaryAxisOnly = false
	ao.ReactionTorqueEnabled = false
	ao.Responsiveness = 200
	ao.Attachment1 = att1
	ao.Attachment0 = att0
	ao.RigidityEnabled = false

	att1.Parent = Part1
	att1.Name = "att1_" .. Part1.Name

	att0.Parent = Part0
	att0.Name = "att0_" .. Part0.Name

	if netboost then
		spawn(function()
			local vel = Vector3.new(0, 0, 0)
			while rs.Stepped:Wait() and Part0 and Part0.Parent do
				Part0.Velocity = vel
				rs.Heartbeat:Wait()
				if Part0 and Part0.Parent then
					vel = Part0.Velocity
					Part0.Velocity = netboost
				end
			end
		end)
	end
end

local function respawnrequest()
	local c = lp.Character
	local ccfr = ws.CurrentCamera.CFrame
	local fc = Instance.new("Model")
	fc.Name = "YXDummy"
	local nh = Instance.new("Humanoid", fc)
	lp.Character = fc
	nh.Health = 0
	lp.Character = c
	fc:Destroy()
	local con = nil
	local function confunc()
		con:Disconnect()
		ws.CurrentCamera.CFrame = ccfr
	end
	con = rs.RenderStepped:Connect(confunc)
end

local destroyhum = (method == 4) or (method == 5)
local breakjoints = (method == 0) or (method == 4)
local antirespawn = (method == 0) or (method == 2) or (method == 3)

if addtools then
	addtools = gp(lp, "Backpack", "Backpack")
end

if not (c and c.Parent) then
	return
end

if antirespawn then
	respawnrequest()
end

if method == 0 then
	wait(5.5)
	if not (c and c.Parent) then
		return
	end
end

if newanimate then
	local animate = gp(c, "Animate", "LocalScript")
	if animate then
		animate.Disabled = true
		local hum = c:FindFirstChildOfClass("Humanoid")
		if hum then
			for i, v in pairs(hum:GetPlayingAnimationTracks()) do
				v:Stop()
			end
		end
	end
end

if addtools then
	for i, v in pairs(addtools:GetChildren()) do
		if v and v.Parent and v:IsA("Tool") then
			v.Parent = c
		end
	end
end

pcall(function()
	settings().Physics.AllowSleep = false
	settings().Physics.PhysicsEnvironmentalThrottle = Enum.EnviromentalPhysicsThrottle.Disabled
end)

local OLDscripts = {}

for i, v in pairs(c:GetDescendants()) do
	if v.ClassName == "Script" then
		table.insert(OLDscripts, v)
	end
end

local scriptNames = {}

for i, v in pairs(c:GetDescendants()) do
	if v and v.Parent and v:IsA("BasePart") then
		local newName = tostring(i)
		local exists = true
		while exists do
			exists = false
			for i, v in pairs(OLDscripts) do
				if v.Name == newName then
					exists = true
				end
			end
			if exists then
				newName = newName .. "_"    
			end
		end
		table.insert(scriptNames, newName)
		Instance.new("Script", v).Name = newName
	end
end

c.Archivable = true
local cl = c:Clone()
for i, v in pairs(cl:GetDescendants()) do
	pcall(function()
		v.Transparency = 1
		v.Anchored = false
	end)
end

local model = Instance.new("Model", c)
model.Name = model.ClassName

for i, v in pairs(c:GetChildren()) do
	if v and v.Parent and (v ~= model) then
		if destroyhum and v:IsA("Humanoid") then
			v:Destroy()
		else
			if addtools and v:IsA("Tool") then
				for i1, v1 in pairs(v:GetDescendants()) do
					if v1 and v1.Parent and v1:IsA("BasePart") then
						local bv = Instance.new("BodyVelocity", v1)
						bv.Velocity = Vector3.new(0, 0, 0)
						bv.MaxForce = Vector3.new(1000, 1000, 1000)
						bv.P = 1250
						bv.Name = "bv_" .. v.Name
					end
				end
			end
			v.Parent = model
		end
	end
end
local head = gp(model, "Head", "BasePart")
local torso = gp(model, "Torso", "BasePart") or gp(model, "UpperTorso", "BasePart")
if breakjoints then
	model:BreakJoints()
else
	if head and torso then
		for i, v in pairs(model:GetDescendants()) do
			if v and v.Parent and v:IsA("Weld") or v:IsA("Snap") or v:IsA("Glue") or v:IsA("Motor") or v:IsA("Motor6D") then
				local save = false
				if (v.Part0 == torso) and (v.Part1 == head) then
					save = true
				end
				if (v.Part0 == head) and (v.Part1 == torso) then
					save = true
				end
				if not save then
					v:Destroy()
				end
			end
		end
	end
	if method == 3 then
		spawn(function()
			wait(5.5)
			if model and model.Parent then
				model:BreakJoints()
			end
		end)
	end
end

cl.Parent = c
for i, v in pairs(cl:GetChildren()) do
	if v and v.Parent then
		v.Parent = c
	end
end
cl:Destroy()

local modelcolcon = nil
local function modelcolf()
	if model and model.Parent then
		for i, v in pairs(model:GetDescendants()) do
			if v:IsA("BasePart") then
				v.CanCollide = false
			end
		end
	else
		modelcolcon:Disconnect()
	end
end
modelcolcon = rs.Stepped:Connect(modelcolf)
modelcolf()

for i, scr in pairs(model:GetDescendants()) do
	if scr and scr.Parent and (scr.ClassName == "Script") and table.find(scriptNames, scr.Name) then
		local Part0 = scr.Parent
		if Part0:IsA("BasePart") then
			for i1, scr1 in pairs(c:GetDescendants()) do
				if scr1 and scr1.Parent and (scr1.ClassName == "Script") and (scr1.Name == scr.Name) and (not scr1:IsDescendantOf(model)) then
					local Part1 = scr1.Parent
					if (Part1.ClassName == Part0.ClassName) and (Part1.Name == Part0.Name) then
						align(Part0, Part1)
					end
				end
			end
		end
	end
end

for i, v in pairs(c:GetDescendants()) do
	if v and v.Parent then
		if v.ClassName == "Script" then
			if table.find(scriptNames, v.Name) then
				v:Destroy()
			end
		else
			if not v:IsDescendantOf(model) then
				if v:IsA("Decal") then
					v.Transparency = 1
				end
				if v:IsA("ForceField") then
					v.Visible = false
				end
				if v:IsA("Sound") then
					v.Playing = false
				end
				if v:IsA("BillboardGui") or v:IsA("SurfaceGui") or v:IsA("ParticleEmitter") or v:IsA("Fire") or v:IsA("Smoke") or v:IsA("Sparkles") then
					v.Enabled = false
				end
			end
		end
	end
end

if newanimate then
	local animate = gp(c, "Animate", "LocalScript")
	if animate then
		animate.Disabled = false
	end
end

if addtools then
	for i, v in pairs(c:GetChildren()) do
		if v and v.Parent and v:IsA("Tool") then
			v.Parent = addtools
		end
	end
end

local hum0 = model:FindFirstChildOfClass("Humanoid")
local hum1 = c:FindFirstChildOfClass("Humanoid")
if hum1 then
	ws.CurrentCamera.CameraSubject = hum1
	if hum0 then
		hum0.Changed:Connect(function(prop)
			if (prop == "Jump") and hum1 and hum1.Parent then
				hum1.Jump = hum0.Jump
			end
		end)
	else
		lp.Character = nil
		lp.Character = c
	end
end

local rb = Instance.new("BindableEvent", c)
rb.Event:Connect(function()
	rb:Destroy()
	sg:SetCore("ResetButtonCallback", true)
	if destroyhum then
		c:BreakJoints()
		return
	end
	if antirespawn then
		if hum0 and hum0.Parent and (hum0.Health > 0) then
			model:BreakJoints()
			hum0.Health = 0
		end
		respawnrequest()
	else
		if hum0 and hum0.Parent and (hum0.Health > 0) then
			model:BreakJoints()
			hum0.Health = 0
		end
	end
end)
sg:SetCore("ResetButtonCallback", rb)

spawn(function()
	while c and c.Parent do
		if hum0 and hum0.Parent and hum1 and hum1.Parent then
			hum1.Jump = hum0.Jump
		end
		wait()
	end
	sg:SetCore("ResetButtonCallback", true)
end)
--wait(3)
--loadstring(game:HttpGet("https://paste.ee/r/meMmr",true))()
